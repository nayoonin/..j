2017/03/03
eraAS_0.15用UI改変パッチ

――――――――――――――人は言う。「ネコに従う人は必ず実を結ぶ。ネコはいます。ネコはこの地を裁かれる。」



◆対象環境
[era002948]eraAS_0.15
+[era0002949]eraAS_0.15修正パッチ

バニラ環境もしくは[era0002949]のみ適用の場合は使えます
それ以外の競合は調査しておりません

あとこのパッチは不具合おおいです



◆変更内容をわかりやすく実感するには
たくさんの女の子のいるデータをロードして
SHOPコマンドの[110]能力表示を実行しましょう
[4444][6666]でページを左右にカチカチすれば様々な情報がみられます

ページをめくって「신체ST」を表示させたらば
おもむろに画面上部の「가슴사이즈」と書かれているところをクリック
おっぱい順で整列します



◆変更内容
いじりすぎた

・追加：ソート機能つきキャラリスト関数の実装
　関数の移植を快諾してくれた◆eraTWk3.v6さんに感謝を
　移植に際して改造しまくったのであまり原型をとどめていない気もする
　142項目でソート可能、情報ページ数20種類超のやたらてんこもりな関数になりますた
　複雑になりすぎてすまぬ
　ソート処理といっても登録番号に影響はありません
　一時的にキャラリスト配列つくってその配列を並び替えてるだけです

・変更：獲得APの上方修正
　まー、雀の涙って感じだ
　悩み解決による取得APは悩み難易度の1.5倍となるように
　いっそ2倍でもいいかもなと思わんでもないが
　悩み解決→AP増える→悩み解決しやすくなる　のループが想定されるので抑えめにしとく

・変更：喫茶店処理の見直し
　関数が相互にCALLしあうのはどうかと思うので
　RESTARTなりDO-LOOPを使用して記述をシンプルに
　あと会話きゃら切替ができるように

・修正：悩み関連バグの修正
　１．悩み判明判定（NAYAMI_CHALLENGE）でL_INPUTとすべき箇所がI_LOOPになっているのを修正
　２・悩み判明判定（NAYAMI_CHALLENGE）で符号の向きが逆になっているのを修正
　３．CFLAG:주민_悩み解決選択の初期化がなかったっぽいので各所に入れた
　仕様かわからないが変えてしまった点
　会話を行うと発生していない悩みに対しても判明フラグが溜まっていたので
　判明フラグの蓄積は発生ずみの悩みのみに限定した

・変更：悩み解決処理の変更、悩み解決処理を独立させた
　特に不具合が多いと思われる部分がこの処理
　ちょろっとテストプレイしてて自分でもどっかフラグ관리おかしいなとは思った
　１．SHOP→喫茶店での会話での悩み解決は「協力をもちかける」までで実際の解決は別で行う
　２．時間経過の時にあなたのもとに順番にきゃらがやってきてご相談
　以上の変更の結果、流れ作業でお悩み相談ができるようになりました
　つくってて思ったがこのルーチンはeraえーりん通だな

・変更：喫茶店でのスカウトの際に複数キャラを続けて加入できるように

・変更：喫茶店でのスカウトの際に交際状態のランダム指定を追加

・変更：喫茶店でのスカウトの際にＶ処女、Ａ処女をそれぞれ「処女」「비처녀」「ランダム」に指定出来るように
　　これはFLAG:카페범위축소_처녀の仕様変更による
　　bit0=Ｖ処女指定/bit1=Ｖ비처녀指定   両方0ならランダム
　　bit10=Ａ処女指定/bit11=Ａ비처녀指定 両方0ならランダム

・変更：喫茶店でのスカウトの際の経験取得処理を改造



◆注意点
非常に多くのキャラ変数をテーブル処理で番号決め打ちで処理しているために
CSVの変更で既存変数の再配置等を行う場合は見直しが必須です



◆ぎじつてきなおはなし
かなり複雑な処理になったためとくにわかりにくい部分の概要を説明

・前提知識、REF変数の仕様について
REFをこれでもかと多用したので解説
これはデバッグ用関数@VAR_SHOW_STR_ARRAYを使うのがわかりやすいと思う

@VAR_SHOW_STR_ARRAY(STR_ARRAY, STR_SIZE)
#DIMS REF STR_ARRAY
#DIM      STR_SIZE
FOR LOCAL, 0, STR_SIZE
	PRINTFORML STR_ARRAY:{LOCAL} %STR_ARRAY:LOCAL%
NEXT
PRINTFORML {VARSIZE("STR_ARRAY")}
WAIT

REFの仕様を理解していないとこの処理は何故動くのやらサッパリわからない
たとえばこうやって利用する

@TEST_REF_ARRAY
#DIMS TEST_VAR, 5
;一括代入処理
TEST_VAR '= "ねこはいますか？", "はい、ねこはいます", "ここにいます", "そこにもいます", "ねこはどこにでもいます"
CALL VAR_SHOW_STR_ARRAY(TEST_VAR, VARSIZE("TEST_VAR"))


REFの仕様を列挙する
１．引数をREF変数として宣言した場合、呼び出し元の変数を書き換えることが可能になる
２．引数をREF変数として宣言した場合、呼び出し元の配列変数を配列として丸ごと受け取る
　　また、REF変数の要素数は引数を受け取った際に決定される
　　（一次元、二次元などがあっていれば要素数を宣言する必要が無い）
３．「引数をREF変数として宣言」かつ「引数として配列変数が渡された」場合、添字が必須になる
　　配列変数を受け取った場合にはREF変数も配列変数になるという仕様には注意が必要
　　あまり意識しないがLOCALやAなんかも配列変数だから渡す場合には注意
　　Emueraでは例えばMASTERと記述した場合にMASTER:0が参照される
　　この「要素を省略したら要素0を参照」という仕様はREF変数に対してもはたらく
　　例えば
　　CALL VAR_SHOW_STR_ARRAY(TEST_VAR:1, VARSIZE("TEST_VAR"))
　　仮にこう書いてもREF変数で受け取る引数は
　　　×「配列変数の1要素」
　　　○「配列変数まるごと」
　　なので全て表示される
　　
　　@INFO_STATUS_GROUPでは
　　　第一引数：キャラリスト配列
　　　第ニ引数：キャラリスト配列で閲覧中の要素
　　こうすることでキャラリスト配列を順番に参照する処理をつくった
　　
　　REF変数を使ったら添字に注意すること

・「LABEL」を使用したテーブル処理
複数のキャラクタ変数、CFLAGやMARK、EXPなどを一括して取り扱うためにテーブルを利用する
このテーブルをLABELと呼ぶことにした
内容は以下のようになっている
	000:[none,         none,  none]

	001:[識別ID,       CFLAG, 530]
	002:[협력상황,     CFLAG, 5016]
	003:[관계단계,     CFLAG, 551]
	004:[설득도,     CFLAG, 510]
	005:[호감도　　　, CFLAG, 550]

	006:[충성도,       CFLAG, 500]
	007:[예속각인,     MARK,  0]
	008:[애정도,       CFLAG, 501]
	009:[함락각인,     MARK,  1]
	010:[음란도,       CFLAG, 502]
テーブル内でのID、識別子、識別子の示す変数の種類、識別子の示す変数のIDを順に記述してある
テーブルIDの0番は使用しないことにしている
このテーブルの識別子は「LABEL_NAME」でLABELは현재142種類が実装済みである（追加も難しくないよ）
実際の定義方法はこうなる

{
#DIMS CONST C_LABEL_NAME, 143 = "none",
	"識別ID",         "협력상황",       "관계단계",     "설득도",       "호감도　　　", 
	"충성도",         "예속각인",       "애정도",       "함락각인",       "음란도", 
～略～
}

{
#DIMS CONST C_LABEL_VAR_NAME, 143 = "none",
	"CFLAG", "CFLAG", "CFLAG", "CFLAG", "CFLAG", 
	"CFLAG", "MARK",  "CFLAG", "MARK",  "CFLAG", 
～略～
}
{
#DIM  CONST C_LABEL_VAR_ID, 143 = 0, 
	 530, 5016,  551,  510,  550, 
	 500,    0,  501,    1,  502, 
～略～
}

多次元配列でのCONST利用は不可能なので記述したい情報の種類だけ一次元配列を作成した

作成した多くの関数でLABEL_NAMEを利用してキャラの情報が参照できるように処理を組んだ
ソート機能つきキャラリスト表示関数@LIST_CHARA_STATUS_MAINでは
142種類の全てのLABELについて情報を表示すること、ソートを行うことが可能である

現状では@LIST_CHARA_STATUS_MAINによるLABEL内容の表示は無味乾燥な数字の羅列として表示される
横幅の文字数制限が結構キツいのもあってとりあえず一番シンプルな形で情報を提示する

LABEL_NAME:5、호감도のうしろに全角スペースがくっついているのは
各ラベルの表示スペースをLABEL_NAME準拠にしていて
호감도や수입などは名前のわりに大きな桁数となるためである（表示ズレの予防）

未使用の変数も表示されてる？気にするな


・「LABEL_LIST」
LABEL_LISTはある複数のLABELをまとめたものである
例えばLABEL_LIST01はこんなリストになっている
;情報 01.교류ST
{
#DIMS CONST LABEL_LIST01, 6 = 
	"識別ID",   "협력상황", "관계단계", "설득도",  "호감도　　　", 
	"人物난이도"
}
ここで定義される各LABEL_NAMEは識別子であり正確に記述しないとエラーの原因となるので注意

さらに、LABEL_LISTも識別子を持っていてこれによってリストを切り替えることができる
{
#DIMS CONST C_LIST_NAME, 23 = "none", 
	"교류ST", 
	"陥落ST", 
	"성격ST", 
	"경제ST", 
	"신체ST", 
	"外見ST", 
	"生殖ST", 
	"페로몬ST", 
	"性感覚ABL", 
	"성기능ABL", 
	"성벽ABL", 
	"快楽経験", 
	"성행동경험", 
	"성교경험", 
	"조교경험", 
	"특수쾌락경험", 
	"일상경험", 
	"전투BASE", 
	"전투ST", 
	"탐색ABL", 
	"メイン무장", 
	"サブ무장"
}

これはソート機能つきキャラリスト表示関数@LIST_CHARA_STATUS_MAINで使用するための
情報ページ切り替え用の機能である

・「LIST_PACK」
RPG系のイベントを実行するキャラを選択する場合を考える
この場合、"페로몬ST", "성교경험", こういった情報は表示する必要がない
なにせ情報表示のページを常に全部表示可能にすると20ページ以上になるので取捨選択は重要である
そこで、状況に応じてLIST_NAMEの組み合わせを変えられるように処理を組んだ
これをLIST_PACKと呼ぶ

まー、今のところデフォルト・喫茶店向けの「C_PACK_ALL」しか使用していないけどねー
{
#DIMS CONST C_PACK_ALL, 23 = 
	"기초정보", 
	"교류ST", 
	"陥落ST", 
	"성격ST", 
	"경제ST", 
	"신체ST", 
	"外見ST", 
	"生殖ST", 
	"페로몬ST", 
	"性感覚ABL", 
	"성기능ABL", 
	"성벽ABL", 
	"快楽経験", 
	"성행동경험", 
	"성교경험", 
	"조교경험", 
	"특수쾌락경험", 
	"일상경험", 
	"전투BASE", 
	"전투ST", 
	"탐색ABL", 
	"メイン무장", 
	"サブ무장"
}


基本的にはLIST_NAMEを使用すること
要素0の"기초정보"は例外処理になっていて
従来から使用していた@INFO_TARGET_DETAILでの情報表示を行う



◆その他アイディア
色々書いたがネタ出しであって急かしてるわけではないから
気にせずに自分のペースで作ってね

・SCPをどう使うか
SCPでなにをやりたいのかが問題
→世界観、SCPの職員や職種設定の流用
　現状でもセキュリティ云々ってのはもう活用してるっぽいよね
→形式、SCPの形式や演出、著述方法の流用
　SCPのうちでもエロに特化した事象を意味するERAオブジェクトクラスでもでっち上げて
　エロイベント、エロアイテム、イベントで入手できる유니크NPC
　ここらへんをSCP風に記述したデータベース（辞書？）っぽいもんを作って
　フラグで該当情報のデータベース閲覧が解禁されるなど、
　オリジナルで追加していく方式なんでこの方向性だとネタ数で勝負という面も出てくる
　製作が大変だ
→SCPのアイテムを流用したエロス
　悪用事件など？
　くわしくないから割愛、基本的に使っちゃダメだよねあの団体
→非エロのイベントとしてSCPの탐색や관리、調査、脱走イベント等
　依頼を追加するネタにするという方向性
→独立勢力としてのSCP財団が接触してくるイベント
　都市とは別個にSCP財団を設定して接触を受ける
　全容がわかりやすい形で公開されない、という点がSCPのおもしろさの一つだと思う
　都市に関してかなりの情報を握るであろう「プレイヤー」という立場だとあけっぴろげに見えすぎてしまう
　ので、あなたを部外者にして情報を隠す
　イベントの成功で徐々にセキュリティランクが上がってデータベースの情報が開示されていく
　まー、eraだとERB覗いたら終わりなわけだが

・体制側のNPCがいるとなかなか楽しそう
SCP財団の情報開示担当者なり
都市データベースのAIなり
「プレイヤー」の監視/補佐担当者として都市が派遣する「アシスタント」なり
あなたとは別の「プレイヤー」なり

イベントの導入にも使える
依頼の時に話してる人も名前がつくだけでかなり印象が変わると思う
（設定はすでにあるのかもしれないが）



◆つくったひと：morph
・morphのつくった以外のところの扱いはつくったひとに聞いて下さい
・配布・改造・流用、好きにしてください
・でも、その際のサポートは自分でやってね

※　era＝R-18全般の常識的な取り扱いとして例えば以下のような事はやめて下さい

・未成年者がいっぱいいる場所で広める
・R-18以外のモノをメインに扱ってる場所で取り上げる
